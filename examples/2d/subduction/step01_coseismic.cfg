[pylithapp]
# ----------------------------------------------------------------------
# PROBLEM DESCRIPTION
# ----------------------------------------------------------------------
#
# This simulation involves coseismic slip between the continental
# crust and top of the subducting oceanic crust. The slip also
# extends down into the top of the mantle below the continental
# crust.
#
# ----------------------------------------------------------------------
# RUNNING THE SIMULATON
# ----------------------------------------------------------------------
#
# This is not a self-contained simulation configuration file. This
# file specifies only the boundary conditions and earthquake
# parameters for the simulation. The general quasi-static and mesh
# parameters are specificed in the pylithapp.cfg file which PyLith
# reads by default.
#
# To run the simulation:
# pylith step01_coeseismic.cfg
#
# Output will be directed to the 'output' directory.

# ----------------------------------------------------------------------
# Monitoring and parameter viewing.
# ----------------------------------------------------------------------
[pylithapp]
# You can view this file using the pylith_parameters application or
# online at https://geodynamics.github.io/pylith_parameters/.
dump_parameters.filename = output/step01_coseismic-parameters.json
problem.progress_monitor.filename = output/step01_coseismic-progress.txt

# ----------------------------------------------------------------------
# problem
# ----------------------------------------------------------------------
[pylithapp.timedependent]
# Define the total time for the simulation and initial time step size.
initial_dt = 5.0*year
start_time = -5.0*year
total_time = 0.0*year

# ----------------------------------------------------------------------
# solution
# ----------------------------------------------------------------------
[pylithapp.problem.solution_observers.domain]
writer.filename = output/step01_coseismic-domain.h5

[pylithapp.problem.solution_observers.groundsurf]
writer.filename = output/step01_coseismic-groundsurf.h5

# ----------------------------------------------------------------------
# materials
# ----------------------------------------------------------------------
[pylithapp.problem.materials.continent_crust]
observers.observer.writer.filename = output/step01_coseismic-concrust.h5

[pylithapp.problem.materials.continent_mantle]
observers.observer.writer.filename = output/step01_coseismic-conmantle.h5

[pylithapp.problem.materials.ocean_crust]
observers.observer.writer.filename = output/step01_coseismic-oceancrust.h5

[pylithapp.problem.materials.ocean_mantle]
observers.observer.writer.filename = output/step01_coseismic-oceanmantle.h5


# ----------------------------------------------------------------------
# faults
# ----------------------------------------------------------------------
[pylithapp.problem]
interfaces = [fault]
interfaces.fault = pylith.faults.FaultCohesiveKin

[pylithapp.problem.interfaces.fault]
# The label corresponds to the nodeset we created in CUBIT/Trelis for the fault.
label = fault_slabtop

observers.observer.data_fields = [slip]
observers.observer.writer.filename = output/step01_coseismic-fault.h5

[pylithapp.problem.interfaces.fault.eq_ruptures.rupture]
# We specify slip as a function of depth, so we use a SimpleDB with
# linear interpolation.
db_auxiliary_field = spatialdata.spatialdb.SimpleDB
db_auxiliary_field.label = Fault rupture auxiliary field spatial database
db_auxiliary_field.iohandler.filename = fault_coseismic.spatialdb
db_auxiliary_field.query_type = linear


# ----------------------------------------------------------------------
# boundary conditions
# ----------------------------------------------------------------------
[pylithapp.problem]
# Set bc to an array of 4 boundary conditions:
#   'boundary_east_crust'
#   'boundary_east_mantle'
#   'boundary_west'
#   'boundary_bottom_mantle'
#
# On each boundary we fix the displacement normal to the boundary
# (roller boundary condition).
#
# The label corresponds to the name of the nodeset in CUBIT/Trelis.
bc = [boundary_east_crust, boundary_east_mantle, boundary_west, boundary_bottom_mantle]


# East boundary (crust)
[pylithapp.problem.bc.boundary_east_crust]
constrained_dof = [0]
label = bndry_east_crust
db_auxiliary_field = pylith.bc.ZeroDB
db_auxiliary_field.label = Dirichlet BC on east boundary (crust)

observers.observer.data_fields = [displacement]
observers.observer.writer.filename = output/step01_coseismic-bc_east_crust.h5


# East boundary (mantle)
[pylithapp.problem.bc.boundary_east_mantle]
constrained_dof = [0]
label = bndry_east_mantle
db_auxiliary_field = pylith.bc.ZeroDB
db_auxiliary_field.label = Dirichlet BC on east boundary (mantle)

observers.observer.data_fields = [displacement]
observers.observer.writer.filename = output/step01_coseismic-bc_east_mantle.h5

# West boundary
[pylithapp.problem.bc.boundary_west]
constrained_dof = [0]
label = bndry_west
db_auxiliary_field = pylith.bc.ZeroDB
db_auxiliary_field.label = Dirichlet BC on west boundary

observers.observer.data_fields = [displacement]
observers.observer.writer.filename = output/step01_coseismic-bc_west.h5

# Bottom boundary (mantle)
[pylithapp.problem.bc.boundary_bottom_mantle]
constrained_dof = [1]
label = bndry_bot_mantle
db_auxiliary_field = pylith.bc.ZeroDB
db_auxiliary_field.label = Dirichlet BC on bottom boundary (mantle)

observers.observer.data_fields = [displacement]
observers.observer.writer.filename = output/step01_coseismic-bc_bottom_mantle.h5


# End of file
