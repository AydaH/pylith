[pylithapp]
# Simple shear using Dirichlet and Neumann boundary conditions.
#
# We replace the Dirichlet boundary conditions on the +x and +y
# boundaries in step02 with Neumann boundary conditions with uniform
# tangential (shear) tractions.
#
#             --->
#          ----------
#          |        |
#        | |        | ^
#        v |        | |
#          |        |
#          ----------
#             <--
#
# Dirichlet boundary conditions
#
# boundary_xneg: Ux = a*y, Uy = a*x
# boundary_yneg: Ux = a*y, Uy = a*x
# boundary_zneg: Uz=0
#
# Neumann boundary conditions
#
# Note that the components are given in terms of the tangential 1 (t =
# z x n), tangential 2 (n x tangential 1) and (outward) normal
# directions.
#
# boundary_xpos: Tt1 = +b, Tt2 = 0, Tn = 0
# boundary_ypos: Tt1 = -b, Tt2 = 0, Tn = 0

[pylithapp]
# File with version information and parameters (including defaults).
#
# You can view this file using the pylith_parameters application or
# online at https://geodynamics.github.io/pylith_parameters/.
dump_parameters.filename = output/step03_sheardisptract-parameters.json

# Set the name of the problem that will be used to construct the
# output filenames. The default directory for output is 'output'.
problem.defaults.name = step03_sheardisptract

# ----------------------------------------------------------------------
# solution
# ----------------------------------------------------------------------
[pylithapp.problem.solution.subfields.displacement]
# The solution has uniform strain, so displacement field is linear, so
# basis order of 1 should give exact solution.
basis_order = 1

# ----------------------------------------------------------------------
# boundary conditions
# ----------------------------------------------------------------------
[pylithapp.problem]
# We have three Dirichlet and two Neumann boundary conditions as described above.
bc = [bc_xneg, bc_xpos, bc_yneg, bc_ypos, bc_zneg]
bc.bc_xneg = pylith.bc.DirichletTimeDependent
bc.bc_yneg = pylith.bc.DirichletTimeDependent
bc.bc_xpos = pylith.bc.NeumannTimeDependent
bc.bc_ypos = pylith.bc.NeumannTimeDependent
bc.bc_zneg = pylith.bc.DirichletTimeDependent

# Degrees of freedom:
#   x: 0
#   y: 1
#   z: 2
#
# The 'label' corresponds to the name of the nodeset we created in
# CUBIT/Trelis in bc.jou.

# Dirichlet boundary conditions
[pylithapp.problem.bc.bc_xneg]
constrained_dof = [1]
label = boundary_xneg
db_auxiliary_field = spatialdata.spatialdb.SimpleDB
db_auxiliary_field.label = Dirichlet BC -x edge
db_auxiliary_field.iohandler.filename = sheardisp_bc_xneg.spatialdb
db_auxiliary_field.query_type = linear

[pylithapp.problem.bc.bc_yneg]
constrained_dof = [0]
label = boundary_yneg
db_auxiliary_field = spatialdata.spatialdb.SimpleDB
db_auxiliary_field.label = Dirichlet BC -y edge
db_auxiliary_field.iohandler.filename = sheardisp_bc_yneg.spatialdb
db_auxiliary_field.query_type = linear

[pylithapp.problem.bc.bc_zneg]
constrained_dof = [2]
label = boundary_zneg
db_auxiliary_field = pylith.bc.ZeroDB
db_auxiliary_field.label = Dirichlet BC -z boundary


# Neumann boundary conditions
#
# The tractions are uniform, so we use a UniformDB.
[pylithapp.problem.bc.bc_xpos]
label = boundary_xpos
db_auxiliary_field = spatialdata.spatialdb.UniformDB
db_auxiliary_field.label = Neumann BC +x edge
db_auxiliary_field.values = [initial_amplitude_tangential_1, initial_amplitude_tangential_2, initial_amplitude_normal]
db_auxiliary_field.data = [+9.0*MPa, 0*MPa, 0*MPa]

[pylithapp.problem.bc.bc_ypos]
label = boundary_ypos
db_auxiliary_field = spatialdata.spatialdb.UniformDB
db_auxiliary_field.label = Neumann BC +y edge
db_auxiliary_field.values = [initial_amplitude_tangential_1, initial_amplitude_tangential_2, initial_amplitude_normal]
db_auxiliary_field.data = [-9.0*MPa, 0*MPa, 0*MPa]


# End of file
