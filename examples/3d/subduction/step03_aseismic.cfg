# -*- Config -*- (syntax highlighting)
# ----------------------------------------------------------------------
#
# Brad T. Aagaard, U.S. Geological Survey
# Charles A. Williams, GNS Science
# Matthew G. Knepley, University of Chicago
#
# This code was developed as part of the Computational Infrastructure
# for Geodynamics (http://geodynamics.org).
#
# Copyright (c) 2010-2017 University of California, Davis
#
# See COPYING for license information.
#
# ----------------------------------------------------------------------
# PROBLEM DESCRIPTION
# ----------------------------------------------------------------------
#
# We simulate interseismic deformation, combining aseismic slip on the
# top and bottom of the subducting slab with viscoelastic relaxation
# in the mantle and the deep part of the slab.
#
# Materials
#   The 'wedge' and 'crust' blocks use the the linear, isotropic
#   elastic material model, whereas the 'slab' and 'mantle' use the
#   linear Maxwell viscoelastic material model (mat_viscoelastic.cfg).
#
# Boundary Conditions
#   Roller boundary conditions (pylithapp.cfg).
#
# Fault
#   Uniform creep on the bottom of the slab.
#   Uniform creep on the deeper portion of the subduction interface.
#
# ----------------------------------------------------------------------
# RUNNING THE SIMULATON
# ----------------------------------------------------------------------
#
# Parameter files:
#   - pylithapp.cfg (common paramters, read by default)
#   - step03_aseismic.cfg (main parameter file for step03)
#   - mat_viscoelastic.cfg (material models and parameters)
#   - solver_fieldsplit.cfg (field split solver settings)
#
# TO RUN THE SIMULATION:
#   pylith step03_aseismic.cfg mat_viscoelastic.cfg solver_fieldsplit.cfg
#
# Output will be directed to the "output" directory.

# ----------------------------------------------------------------------
# Output of parameters used and simulation progress.
# ----------------------------------------------------------------------
[pylithapp]
dump_parameters.filename = output/step03_aseismic-parameters.json
problem.progress_monitor.filename = output/step03_aseismic-progress.txt

# Set the name of the problem that will be used to construct the
# output filenames. The default directory for output is 'output'.
problem.defaults.name = step03_aseismic


# ----------------------------------------------------------------------
# problem
# ----------------------------------------------------------------------
[pylithapp.problem]
# Define the total time for the simulation, the start time, and the
# initial time step size.
initial_dt = 10.0*year
start_time = -10.0*year
total_time = 200.0*year

# ----------------------------------------------------------------------
# solution
# ----------------------------------------------------------------------
[pylithapp.problem]
# Set the discretization and integration for each of the solution subfields.
#
# IMPORTANT: The quadrature order *must* the same for all solution and
# auxiliary subfields. PyLith will verify that this requirement is met.
# This requirement may be relaxed in the future.
#
# For a quastistatic simulation with a fault, we have two solution fields:
# (1) displacement and (2) Lagrange multiplier. We use a predefined containter
# to create a solution field with these two subfields.
solution = pylith.problems.SolnDispLagrange

[pylithapp.problem.solution.subfields]
displacement.basis_order = 1
lagrange_fault.basis_order = 1

# ----------------------------------------------------------------------
# faults
# ----------------------------------------------------------------------
[pylithapp.problem]
# We prescribe slip on the top and bottom of the slab.
interfaces = [slab_bottom, slab_top]

[pylithapp.problem.interfaces]
slab_bottom = pylith.faults.FaultCohesiveKin
slab_top = pylith.faults.FaultCohesiveKin

# Slab bottom ----------------------------------------------------------
[pylithapp.problem.interfaces.slab_bottom]
id = 100 ; Must be different from ids used for materials
label = fault_slabbot ; Nodeset for the entire fault surface
edge = fault_slabbot_edge ; Nodeset for the buried edges
# Some portions of the bottom of the slab are perfectly horizontal, so
# our procedure that uses the vertical direction and the fault normal
# to set the along-strike and up-dip shear components breaks down. We
# remedy this by tweaking the ref_dir_1 from being completely vertical to
# tilting slightly to the west. This will result in the desired
# along-strike and up-dip directions.
ref_dir_1 = [-0.1,0,0.9]

observers.observer.data_fields = [slip]

# Use the constant slip rate time function.
eq_ruptures.rupture = pylith.faults.KinSrcConstRate

# The slip time and final slip are defined in spatial databases.
[pylithapp.problem.interfaces.slab_bottom.eq_ruptures.rupture]
db_auxiliary_field = spatialdata.spatialdb.UniformDB
db_auxiliary_field.label = Slab bottom slip rate.
db_auxiliary_field.values = [slip_rate_left_lateral, slip_rate_reverse, slip_rate_opening, initiation_time]
db_auxiliary_field.data = [+2.0*cm/year, -4.0*cm/year, 0.0*cm/year, 0.0*year]

# Slab top -------------------------------------------------------------
[pylithapp.problem.interfaces.slab_top]
id = 101 ; Must be different from ids used for materials
label = fault_slabtop ; Nodeset for the entire fault surface
edge = fault_slabtop_edge ; Nodeset for the buried edges

observers.observer.data_fields = [slip]

# Use the constant slip rate time function.
eq_ruptures.rupture = pylith.faults.KinSrcConstRate

# The slip time and final slip are defined in spatial databases.
[pylithapp.problem.interfaces.slab_top.eq_ruptures.rupture]
db_auxiliary_field = spatialdata.spatialdb.SimpleGridDB
db_auxiliary_field.label = Slab top slip rate.
db_auxiliary_field.filename = spatialdb/fault_slabtop_creep.spatialdb
db_auxiliary_field.query_type = linear

# ----------------------------------------------------------------------
# boundary conditions
# ----------------------------------------------------------------------
# We do not want the boundaries to constrain the motion of the
# subducting slab, so we use the nodesets that exclude vertices on the
# subducting slab. Furthermore, PyLith does not permit overlap between
# the fault interfaces and Dirichlet boundary conditions. This is why
# we exclude vertices on the splay fault in these nodesets as well. We
# only update the name of the nodeset for the -x, -y, and +y
# boundaries.

# -x face
[pylithapp.problem.bc.x_neg]
label = boundary_xneg_noslab

# -y face
[pylithapp.problem.bc.y_neg]
label = boundary_yneg_noslab

# +y face
[pylithapp.problem.bc.y_pos]
label = boundary_ypos_noslab


# End of file
